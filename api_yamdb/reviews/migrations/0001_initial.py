# Generated by Django 2.2.16 on 2022-11-18 03:40

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import reviews.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vkId', models.PositiveIntegerField(unique=True, verbose_name='ID группы')),
                ('updated', models.DateTimeField(verbose_name='Дата обновления')),
                ('type', models.CharField(max_length=42, verbose_name='Тип')),
                ('name', models.CharField(max_length=73, verbose_name='Название')),
                ('screenName', models.SlugField(max_length=73, unique=True, verbose_name='Уникальный идентификатор')),
                ('photo', models.URLField()),
                ('cover', models.URLField()),
                ('mainSection', models.PositiveSmallIntegerField(validators=[reviews.models.validate_score], verbose_name='я хз, что это')),
                ('country', models.CharField(max_length=42, verbose_name='Страна')),
                ('city', models.CharField(max_length=42, verbose_name='Город')),
                ('activity', models.CharField(max_length=42, verbose_name='Активность (что бы это не значило)')),
                ('status', models.CharField(blank=True, max_length=73, null=True, verbose_name='Статус (что бы это не значило)')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Здесь должно быть описание группы.')),
                ('ageLimits', models.PositiveSmallIntegerField(verbose_name='Возрастное ограничение (вероятно)')),
                ('membersCount', models.PositiveIntegerField(verbose_name='Количество участников')),
                ('fixedPost', models.PositiveIntegerField(blank=True, null=True, verbose_name='Закреплённый пост')),
                ('contacts', models.TextField(blank=True, null=True, verbose_name='Контакты')),
                ('site', models.URLField(blank=True, null=True, verbose_name='Сайт')),
                ('isTrending', models.BooleanField(default=False, verbose_name='В тренде?')),
                ('isVerified', models.BooleanField(default=False, verbose_name='Подтверждён?')),
                ('hasMarket', models.BooleanField(default=False, verbose_name='Имеет магазин?')),
            ],
            options={
                'verbose_name': 'Группа',
                'verbose_name_plural': 'Группы',
            },
        ),
        migrations.CreateModel(
            name='Roles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('bio', models.TextField(blank=True, verbose_name='Биография')),
                ('role', models.CharField(choices=[('admin', 'Администратор'), ('moderator', 'Модератор'), ('user', 'Аутентифицированный пользователь')], default='user', max_length=50, verbose_name='Роль')),
                ('email', models.EmailField(max_length=100, unique=True, verbose_name='Email')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователи',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
